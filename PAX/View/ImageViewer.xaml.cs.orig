using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging; //bitmap
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using Microsoft.Phone.Controls;
using PAX7.ViewModel;
using PAX7.Model;
using System.Collections.ObjectModel;

namespace PAX7
{
    public partial class ImageViewer : PhoneApplicationPage
    {

        public ImageViewer()
        {
            InitializeComponent();

        }

        protected override void OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs e)
        {
            string newparameter = this.NavigationContext.QueryString["Image"];
            floormaps.Visibility = System.Windows.Visibility.Collapsed;
            cityMap.Visibility = System.Windows.Visibility.Collapsed;
            expoMaps.Visibility = System.Windows.Visibility.Collapsed;
            worldmaps.Visibility = System.Windows.Visibility.Collapsed;
            if (newparameter.Equals("map_world"))
            {
                worldmaps.Visibility = System.Windows.Visibility.Visible;
            }
            else if (newparameter.Equals("map_expo"))
            {
                expoMaps.Visibility = System.Windows.Visibility.Visible;
            }
            else if (newparameter.Equals("map_level"))
            {
                floormaps.Visibility = System.Windows.Visibility.Visible;
            }
            else //city map
            {
                cityMap.Visibility = System.Windows.Visibility.Visible;

            }
            resetCenterX = levelImage0.RenderTransformOrigin.X;
            resetCenterY = levelImage0.RenderTransformOrigin.Y;
            //base.OnNavigatedTo(e);         
            
        }


        //in case we want to save state when they leave this page
        protected override void OnNavigatedFrom(System.Windows.Navigation.NavigationEventArgs e)
        {
        }
        
        #region gestures

        double initialAngle = 0, initialScale=1;
        double resetAngle = 0, resetScale = 1;
        double resetCenterX, resetCenterY;

        private void OnPinchStarted(object sender, PinchStartedGestureEventArgs e)
        {
            Image photo = sender as Image;
            CompositeTransform transform = photo.RenderTransform as CompositeTransform;
            initialAngle = transform.Rotation;
            initialScale = transform.ScaleX;
        }

        private void OnPinchDelta(object sender, PinchGestureEventArgs e)
        {
            Image photo = sender as Image;
            CompositeTransform transform = photo.RenderTransform as CompositeTransform;
            transform.Rotation = initialAngle; // +e.TotalAngleDelta; stop the image from rotating under pinch/zoom
            transform.ScaleX = initialScale * e.DistanceRatio;
            transform.ScaleY = initialScale * e.DistanceRatio;
        }

        private void OnDoubleTap(object sender, GestureEventArgs e)
        {
            Image photo = sender as Image;
            CompositeTransform transform = photo.RenderTransform as CompositeTransform;
            Center(photo);     //changed this to always center the image on doubletap        
            ResetSize(transform);               
        }

        private void ResetSize(CompositeTransform transform)
        {
            transform.ScaleX = resetScale;
            transform.ScaleY = resetScale;
        }

        private void Center(Image image)
        {
            CompositeTransform transform = image.RenderTransform as CompositeTransform;
            transform.ScaleX = resetScale;
            transform.ScaleY = resetScale;
            transform.Rotation = resetAngle;
            transform.TranslateX = resetCenterX;
            transform.TranslateY = resetCenterY;
        }

        private void OnDragDelta(object sender, DragCompletedGestureEventArgs e)
        {
            Image photo = sender as Image;
            CompositeTransform transform = photo.RenderTransform as CompositeTransform;

            transform.TranslateX += e.HorizontalChange;
            transform.TranslateY += e.VerticalChange;
        }
        #endregion

        // TODO: make these a single method that actually uses the sender, e arguments
        #region floormaps
        private void Button_Click_Level0(object sender, RoutedEventArgs e)
        {
            levelImage0.Visibility = System.Windows.Visibility.Visible;
            Center(levelImage0);
            ((Button)sender).Background = new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"]);

            levelImage1.Visibility = System.Windows.Visibility.Collapsed;
            levelImage2.Visibility = System.Windows.Visibility.Collapsed;
            levelImage3.Visibility = System.Windows.Visibility.Collapsed;
        }

        private void Button_Click_Level1(object sender, RoutedEventArgs e)
        {
            levelImage1.Visibility = System.Windows.Visibility.Visible;
            Center(levelImage1);
            ((Button)sender).Background = new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"]);

            levelImage0.Visibility = System.Windows.Visibility.Collapsed;
            levelImage2.Visibility = System.Windows.Visibility.Collapsed;
            levelImage3.Visibility = System.Windows.Visibility.Collapsed;
        }

        private void Button_Click_Level2(object sender, RoutedEventArgs e)
        {
            levelImage2.Visibility = System.Windows.Visibility.Visible;
            Center(levelImage2);
            ((Button)sender).Background = new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"]);

            levelImage0.Visibility = System.Windows.Visibility.Collapsed;
            levelImage1.Visibility = System.Windows.Visibility.Collapsed;
            levelImage3.Visibility = System.Windows.Visibility.Collapsed;
        }

        private void Button_Click_Level3(object sender, RoutedEventArgs e)
        {
            levelImage3.Visibility = System.Windows.Visibility.Visible;
            Center(levelImage3);
            ((Button)sender).Background = new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"]);

            levelImage0.Visibility = System.Windows.Visibility.Collapsed;
            levelImage1.Visibility = System.Windows.Visibility.Collapsed;
            levelImage2.Visibility = System.Windows.Visibility.Collapsed;
        }
        #endregion

        #region expo maps
        private void Button_Click_expoMap1(object sender, RoutedEventArgs e)
        {
            expoMap1.Visibility = System.Windows.Visibility.Visible;
            Center(expoMap1);
            ((Button)sender).Background = new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"]);
            expoMap2.Visibility = System.Windows.Visibility.Collapsed;
            expoMap3.Visibility = System.Windows.Visibility.Collapsed;
            expoMap4.Visibility = System.Windows.Visibility.Collapsed;
        }
        
        private void Button_Click_expoMap2(object sender, RoutedEventArgs e)
        {
            expoMap2.Visibility = System.Windows.Visibility.Visible;
            Center(expoMap2);
            ((Button)sender).Background = new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"]);
            expoMap1.Visibility = System.Windows.Visibility.Collapsed;
            expoMap3.Visibility = System.Windows.Visibility.Collapsed;
            expoMap4.Visibility = System.Windows.Visibility.Collapsed;
        }
        
        private void Button_Click_expoMap3(object sender, RoutedEventArgs e)
        {
            expoMap3.Visibility = System.Windows.Visibility.Visible;
            Center(expoMap3);
            ((Button)sender).Background = new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"]);
            expoMap1.Visibility = System.Windows.Visibility.Collapsed;
            expoMap2.Visibility = System.Windows.Visibility.Collapsed;
            expoMap4.Visibility = System.Windows.Visibility.Collapsed;
        }
      
        private void Button_Click_expoMap4(object sender, RoutedEventArgs e)
        {
            expoMap4.Visibility = System.Windows.Visibility.Visible;
            Center(expoMap4);
            ((Button)sender).Background = new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"]);
            expoMap1.Visibility = System.Windows.Visibility.Collapsed;
            expoMap2.Visibility = System.Windows.Visibility.Collapsed;
            expoMap3.Visibility = System.Windows.Visibility.Collapsed;
        }
        #endregion

        #region worldmaps
        /* no world map for boston
        private void Button_Click_world(object sender, RoutedEventArgs e)
        {
            worldmap_world.Visibility = System.Windows.Visibility.Visible;
            Center(worldmap_world);
            ((Button)sender).Background = new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"]);
            worldmap_annex.Visibility = System.Windows.Visibility.Collapsed;
            worldmap_sheraton.Visibility = System.Windows.Visibility.Collapsed;
        }

        private void Button_Click_annex(object sender, RoutedEventArgs e)
        {

            worldmap_annex.Visibility = System.Windows.Visibility.Visible;
            Center(worldmap_annex);
            ((Button)sender).Background = new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"]);
            worldmap_world.Visibility = System.Windows.Visibility.Collapsed;
            worldmap_sheraton.Visibility = System.Windows.Visibility.Collapsed;
      
        }

        private void Button_Click_sheraton(object sender, RoutedEventArgs e)
        {
            worldmap_sheraton.Visibility = System.Windows.Visibility.Visible;
            Center(worldmap_sheraton);
            ((Button)sender).Background = new SolidColorBrush((Color)Application.Current.Resources["PhoneAccentColor"]);
            worldmap_world.Visibility = System.Windows.Visibility.Collapsed;
            worldmap_annex.Visibility = System.Windows.Visibility.Collapsed;
      

        }
         * */
        #endregion
        
        
    }
}